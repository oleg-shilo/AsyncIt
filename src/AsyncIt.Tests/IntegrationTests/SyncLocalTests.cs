using System;
using System.Diagnostics;
using System.Xml.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AsyncIt.Tests.IntegrationTests;

public class SyncLocalTests
{

    [Fact]
    public void GenerateExtensionMethodForMethodNamedWithAsync()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods, Interface = Interface.Sync };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            public class OrderService
            {
                static public Task<Order> GetOrderAsync(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            public static class OrderServiceExtensions
            {
                public static Order GetOrder(this OrderService instance, int id)
                    => instance.GetOrderAsync(id).Result;
            }
            """, newCode);
    }

    [Fact]
    public void GenerateExtensionMethodForMethodNamedWithoutAsync()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods, Interface = Interface.Sync };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            public class OrderService
            {
                static public Task<Order> GetOrder(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            public static class OrderServiceExtensions
            {
                public static Order GetOrderSync(this OrderService instance, int id)
                    => instance.GetOrder(id).Result;
            }
            """, newCode);
    }

    [Fact]
    public void GenerateExtensionMethodsForPublicType()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods, Interface = Interface.Sync };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            public class OrderService
            {
                static public Task<Order> GetOrderAsync(int id) => null;
                static public Task<User> GetUserAsync(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            public static class OrderServiceExtensions
            {
                public static Order GetOrder(this OrderService instance, int id)
                    => instance.GetOrderAsync(id).Result;

                public static User GetUser(this OrderService instance, int id)
                    => instance.GetUserAsync(id).Result;
            }
            """, newCode);
    }

    [Fact]
    public void GenerateExtensionMethodsWithGeneticParams()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods, Interface = Interface.Sync };

        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            class OrderService<T>
            {
                static public async Task<List<T>> GetOrder<T, T2>(Dictionary<string, Nullable<int>> id, string name) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            public static class OrderServiceExtensions<T>
            {
                internal static List<T> GetOrderSync<T, T2>(this OrderService<T> instance, Dictionary<string, Nullable<int>> id, string name)
                    => instance.GetOrder<T, T2>(id, name).Result;
            }
            """, newCode);
    }

    [Fact]
    public void GenerateExtensionMethodsWithVoidMethod()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods, Interface = Interface.Sync };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            public class OrderService
            {
                static public Task GetOrderAsync(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            public static class OrderServiceExtensions
            {
                public static void GetOrder(this OrderService instance, int id)
                    => instance.GetOrderAsync(id).Wait();
            }
            """, newCode);
    }


    [Fact]
    public void GeneratePartialTypeForPublicType()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.PartialType, Interface = Interface.Sync };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            partial public class OrderService
            {
                static public Task<Order> GetOrderAsync(int id) => null;
                static public Task<User> GetUserAsync(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            partial public class OrderService
            {
                static public Order GetOrder(int id)
                    => GetOrderAsync(id).Result;

                static public User GetUser(int id)
                    => GetUserAsync(id).Result;
            }
            """, newCode);
    }

    [Fact]
    public void GeneratePartialTypeForMethodNamedWithAsync()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.PartialType, Interface = Interface.Sync };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            partial public class OrderService
            {
                static public async Task<Order> GetOrderAsync(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            partial public class OrderService
            {
                static public Order GetOrder(int id)
                    => GetOrderAsync(id).Result;
            }
            """, newCode);
    }

    [Fact]
    public void GeneratePartialTypeForMethodNamedWithoutAsync()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.PartialType, Interface = Interface.Sync };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            partial public class OrderService
            {
                static public Task<Order> GetOrder(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            partial public class OrderService
            {
                static public Order GetOrderSync(int id)
                    => GetOrder(id).Result;
            }
            """, newCode);
    }

    [Fact]
    public void GeneratePartialTypeWithGeneticParams()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.PartialType, Interface = Interface.Sync };

        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            partial class OrderService<T>
            {
                static public async Task<List<T>> GetOrder<T, T2>(Dictionary<string, Nullable<int>> id, string name) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            partial class OrderService<T>
            {
                static public List<T> GetOrderSync<T, T2>(Dictionary<string, Nullable<int>> id, string name)
                    => GetOrder<T, T2>(id, name).Result;
            }
            """, newCode);
    }

    [Fact]
    public void GeneratePartialTypeWithVoidMethods()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.PartialType, Interface = Interface.Sync };

        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            partial class OrderService
            {
                static public Task GetOrderAsync<T, T2>(Dictionary<string, Nullable<int>> id, string name) {};
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr);

        Assert.Equal(
            """
            // <auto-generated/>
            partial class OrderService
            {
                static public void GetOrder<T, T2>(Dictionary<string, Nullable<int>> id, string name)
                    => GetOrderAsync<T, T2>(id, name).Wait();
            }
            """, newCode.First().Value);
    }
}

