using System;
using System.Diagnostics;
using System.Xml.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AsyncIt.Tests.IntegrationTests;

public class LocalTypes_Async_Tests : TestBase
{
    [Fact]
    public void GeneratePartialTypeForNestedTypeWithNestedNamespace()
    {
        var code = """
            using System;
            using AsyncIt;

            namespace MyCompany
            {
                namespace Banking
                {
                    public partial class BankService
                    {
                        [Async]
                        public partial class OrderService
                        {
                            static public Order GetOrder(int id) => null;
                        }
                    }
                }
            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace MyCompany
            {
                namespace Banking
                {
                    public partial class BankService
                    {
                        public partial class OrderService
                        {
                            static public Task<Order> GetOrderAsync(int id)
                                => Task.Run(() => GetOrder(id));
                        }
                    }
                }
            }
            """;

        var appCode = """
            using System;
            using MyCompany;
            using MyCompany.Banking;

            var order = await BankService.OrderService.GetOrderAsync(1);
            """;

        var generatedCode = code.GenerateExtraSource();
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }

    [Fact]
    public void ShouldIgnoreFullInterfaceMethods()
    {
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;

            [Async]
            partial class OrderService<T>
            {
                static public Order GetOrder() => null;
                static public Task<Order> GetOrderAsync() => null;
                static public Task<User> GetUser() => null;

            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                partial class OrderService<T>
                {
                    static public Task<Order> GetOrderAsync()
                        => Task.Run(() => GetOrder());

                    static public Task<Task<Order>> GetOrderAsyncAsync()
                        => Task.Run(() => GetOrderAsync());

                    static public Task<Task<User>> GetUserAsync()
                        => Task.Run(() => GetUser());
                }
            }
            """;
    }



    [Fact]
    public void GeneratePartialTypeForTypeWithGeneticParams()
    {
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;

            [Async]
            partial class OrderService<T> where T: class, new()
            {
                static public    List<T> GetOrder<T, T2>(Dictionary<string, Nullable<int>> id, string name) 
                    where T: class, new()
                => null;

            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                partial class OrderService<T> where T: class, new()
                {
                    static public Task<List<T>> GetOrderAsync<T, T2>(Dictionary<string, Nullable<int>> id, string name) where T: class, new()
                        => Task.Run(() => GetOrder<T, T2>(id, name));
                }
            }
            """;

        var appCode = """
            using System;
            using AsyncIt.Tests;

            var order = await OrderService<Order>.GetOrderAsync<User, int>(null, "");
            """;

        var generatedCode = code.GenerateExtraSource();
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }



    [Fact]
    public void GeneratePartialTypeForVoidMethods()
    {
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;

            [Async]
            partial class OrderService
            {
                static public void GetOrder<T, T2>(Dictionary<string, Nullable<int>> id, string name) {};
            }
            """;



        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                partial class OrderService
                {
                    static public Task GetOrderAsync<T, T2>(Dictionary<string, Nullable<int>> id, string name)
                        => Task.Run(() => GetOrder<T, T2>(id, name));
                }
            }
            """;
    }

    [Fact]
    public void GeneratePartialTypeForPublicType()
    {
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;

            [Async]
            public partial class OrderService
            {
                static public Order GetOrder(int id) => null;
                static public User GetUser(int id) => null;
            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                public partial class OrderService
                {
                    static public Task<Order> GetOrderAsync(int id)
                        => Task.Run(() => GetOrder(id));

                    static public Task<User> GetUserAsync(int id)
                        => Task.Run(() => GetUser(id));
                }
            }
            """;

        var appCode = """
            using System;
            using AsyncIt.Tests;

            var order = await OrderService.GetOrderAsync(1);
            """;

        var generatedCode = code.GenerateExtraSource();
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }

    [Fact]
    public void GenerateExtensionMethodsForPublicType()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods };
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;

            [Async]
            public class OrderService
            {
                public Order GetOrder(int id) => null;
            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                public static class OrderServiceExtensions
                {
                    public static Task<Order> GetOrderAsync(this OrderService instance, int id)
                        => Task.Run(() => instance.GetOrder(id));
                }
            }
            """;

        var appCode = """
            using System;
            using AsyncIt.Tests;

            var order = await new OrderService().GetOrderAsync(1);
            """;

        var generatedCode = code.GenerateExtraSource(attr);
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }


    [Fact]
    public void GenerateExtensionMethodsForInternalType()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods };
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;
            
            [Async]
            internal class OrderService : User
            {
                public Order GetOrder(int id) => null;
            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                public static class OrderServiceExtensions
                {
                    internal static Task<Order> GetOrderAsync(this OrderService instance, int id)
                        => Task.Run(() => instance.GetOrder(id));
                }
            }
            """;

        var appCode = """
            using System;
            using AsyncIt.Tests;

            var order = new OrderService().GetOrderAsync(1);
            """;

        var generatedCode = code.GenerateExtraSource(attr);
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }

    [Fact]
    public void GenerateExtensionMethodsForInternalType2()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods };
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;
            
            [Async]
            class OrderService
            {
                public Order GetOrder(int id) => null;
            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                public static class OrderServiceExtensions
                {
                    internal static Task<Order> GetOrderAsync(this OrderService instance, int id)
                        => Task.Run(() => instance.GetOrder(id));
                }
            }
            """;

        var appCode = """
            using System;
            using AsyncIt.Tests;

            var order = await new OrderService().GetOrderAsync(1);
            """;

        var generatedCode = code.GenerateExtraSource(attr);
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }

    [Fact]
    public void GeneratePartialTypeForTypeWithExpandedAttribute()
    {
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;
            
            [Async(Algorithm.PartialType)]
            public partial class OrderService
            {
                static public Order GetOrder(int id) => null;
                static public User GetUser(int id) => null;
            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                public partial class OrderService
                {
                    static public Task<Order> GetOrderAsync(int id)
                        => Task.Run(() => GetOrder(id));

                    static public Task<User> GetUserAsync(int id)
                        => Task.Run(() => GetUser(id));
                }
            }
            """;

        var appCode = """
            using System;
            using AsyncIt.Tests;

            var order = OrderService.GetOrderAsync(1);
            """;

        var generatedCode = code.GenerateExtraSource();
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }
}
