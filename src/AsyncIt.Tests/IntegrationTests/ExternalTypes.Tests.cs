using System;
using System.Diagnostics;
using System.Reflection;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AsyncIt.Tests.IntegrationTests;

public class ExternalTypes_Tests
{

    [Fact]
    public void ShouldExtendNormalMethods()
    {
        var asyncAttr = new AsyncExternalAttribute(typeof(HttpClientTest), Interface.Sync);

        var newCode = nameof(HttpClientTest)
            .GetTypeInfo()
            .GenerateExtraCodeForExternalType(asyncAttr);

        Assert.Equal(
            """
            // <auto-generated/>
            using System;
            using System.Net;
            using System.Net.Http.Headers;
            using System.Threading.Tasks;

            namespace AsyncIt.Tests
            {
                public static class HttpClientTestExtensions
                {
                    public static HttpResponseMessage Delete(this HttpClientTest instance, string? requestUri, List<string>? items)
                        => instance.DeleteAsync(requestUri, items).Result;
                }
            }
            """, newCode);
    }


    [Fact]
    public void ShouldExtendGenericMethods()
    {
        var type = typeof(GenericClassTest);
        var asyncAttr = new AsyncExternalAttribute(type, Interface.Full);

        var newCode = type.Name
            .GetTypeInfo()
            .GenerateExtraCodeForExternalType(asyncAttr);

        Assert.Equal(
            """
            // <auto-generated/>
            using System;
            using System.Threading.Tasks;

            namespace AsyncIt.Tests
            {
                public static class GenericClassTestExtensions
                {
                    public static Task PostAsync<T1, T2>(this GenericClassTest instance, T1 arg1)
                        => Task.Run(() => instance.Post<T1, T2>(arg1));

                    public static T1 Send<T1, T2>(this GenericClassTest instance, T1 arg1, T2 arg2) where T1: class, new()
                        => instance.SendAsync<T1, T2>(arg1, arg2).Result;
                }
            }
            """, newCode);
    }

    [Fact]
    public void ShouldSyncExtendGenericMethods()
    {
        var type = typeof(GenericClassTest);
        var asyncAttr = new AsyncExternalAttribute(type, Interface.Sync);

        var newCode = type.Name
            .GetTypeInfo()
            .GenerateExtraCodeForExternalType(asyncAttr);

        Assert.Equal(
            """
            // <auto-generated/>
            using System;
            using System.Threading.Tasks;

            namespace AsyncIt.Tests
            {
                public static class GenericClassTestExtensions
                {
                    public static T1 Send<T1, T2>(this GenericClassTest instance, T1 arg1, T2 arg2) where T1: class, new()
                        => instance.SendAsync<T1, T2>(arg1, arg2).Result;
                }
            }
            """, newCode);
    }


    [Fact]
    public void ShouldHandeClassAndMethodGenericArgsInAsync()
    {
        var type = typeof(MixedGenericClassTest<SimpleClassTest, int>);
        var asyncAttr = new AsyncExternalAttribute(type, Interface.Async);

        var newCode = type.Name
            .GetTypeInfo()
            .GenerateExtraCodeForExternalType(asyncAttr);

        Assert.Equal(
            """
            // <auto-generated/>
            using System;
            using System.Threading.Tasks;

            namespace AsyncIt.Tests
            {
                public static class MixedGenericClassTestExtensions
                {
                    public static Task PostAsync<T1, T2, T3, T4>(this MixedGenericClassTest<T1, T2> instance, T1 arg1, T2 arg2, T3 arg3, T4 arg4) where T1: class, new()
                        => Task.Run(() => instance.Post<T3, T4>(arg1, arg2, arg3, arg4));
                }
            }
            """, newCode);
    }

    [Fact]
    public void ShouldHandeClassAndMethodGenericArgsInSync()
    {
        var type = typeof(MixedGenericClassTest<SimpleClassTest, int>);
        var asyncAttr = new AsyncExternalAttribute(type, Interface.Sync);

        var newCode = type.Name
            .GetTypeInfo()
            .GenerateExtraCodeForExternalType(asyncAttr);

        Assert.Equal(
            """
            // <auto-generated/>
            using System;
            using System.Threading.Tasks;

            namespace AsyncIt.Tests
            {
                public static class MixedGenericClassTestExtensions
                {
                    public static T4 Send<T1, T2, T3, T4>(this MixedGenericClassTest<T1, T2> instance, T1 arg1, T2 arg2, T3 arg3) where T1: class, new() where T4: new()
                        => instance.SendAsync<T3, T4>(arg1, arg2, arg3).Result;
                }
            }
            """, newCode);
    }

    [Fact]
    public void ShouldErrorIfExtendingStaticClass()
    {
        var type = typeof(Directory);
        var asyncAttr = new AsyncExternalAttribute(type, Interface.Async);

        var newCode = type.Name
            .GetTypeInfo()
            .GenerateExtraCodeForExternalType(asyncAttr);

        Assert.True(newCode.StartsWith(
            """
            // <auto-generated/>
            using System;
            using System.Collections.Generic;
            using System.Threading.Tasks;

            namespace System.IO
            {
                public static class DirectoryExtensions
                {
                    public static Task<DirectoryInfo> CreateDirectoryAsync(this Directory instance, string path)
                        => Task.Run(() => instance.CreateDirectory(path));

                    public static Task<DirectoryInfo> CreateDirectoryAsync(this Directory instance, string path, UnixFileMode unixCreateMode)
                        => Task.Run(() => instance.CreateDirectory(path, unixCreateMode));

                    public static Task<FileSystemInfo> CreateSymbolicLinkAsync(this Directory instance, string path, string pathToTarget)
                        => Task.Run(() => instance.CreateSymbolicLink(path, pathToTarget));

                    public static Task<DirectoryInfo> CreateTempSubdirectoryAsync(this Directory instance, string? prefix = "")
                        => Task.Run(() => instance.CreateTempSubdirectory(""));
            """));
    }


    [Fact]
    public void ShouldSyncExtendMethods()
    {
        var type = typeof(SimpleClassTest);
        var asyncAttr = new AsyncExternalAttribute(type, Interface.Sync);

        var newCode = type.Name
            .GetTypeInfo()
            .GenerateExtraCodeForExternalType(asyncAttr);

        Assert.Equal(
            """
            // <auto-generated/>
            using System;
            using System.Threading.Tasks;

            namespace AsyncIt.Tests
            {
                public static class SimpleClassTestExtensions
                {
                    public static void Post1(this SimpleClassTest instance, string arg1)
                        => instance.Post1Async(arg1).Wait();

                    public static void Post3(this SimpleClassTest instance, string arg1)
                        => instance.Post3Async(arg1).Wait();

                    public static string Send1(this SimpleClassTest instance, string arg1, string arg2)
                        => instance.Send1Async(arg1, arg2).Result;

                    public static string Send3(this SimpleClassTest instance, string arg1, string arg2)
                        => instance.Send3Async(arg1, arg2).Result;
                }
            }
            """, newCode);
    }

    [Fact]
    public void ShouldAsyncExtendMethods()
    {
        var type = typeof(SimpleClassTest);
        var asyncAttr = new AsyncExternalAttribute(type, Interface.Async);

        var newCode = type.Name
            .GetTypeInfo()
            .GenerateExtraCodeForExternalType(asyncAttr);

        Assert.Equal(
            """
            // <auto-generated/>
            using System;
            using System.Threading.Tasks;

            namespace AsyncIt.Tests
            {
                public static class SimpleClassTestExtensions
                {
                    public static Task Post1Async(this SimpleClassTest instance, string arg1)
                        => Task.Run(() => instance.Post1(arg1));

                    public static Task Post2Async(this SimpleClassTest instance, string arg1)
                        => Task.Run(() => instance.Post2(arg1));

                    public static Task<string> Send1Async(this SimpleClassTest instance, string arg1, string arg2)
                        => Task.Run(() => instance.Send1(arg1, arg2));

                    public static Task<string> Send2Async(this SimpleClassTest instance, string arg1, string arg2)
                        => Task.Run(() => instance.Send2(arg1, arg2));
                }
            }
            """, newCode);
    }

    [Fact]
    public void ShouldFullExtendMethods()
    {
        var type = typeof(SimpleClassTest);
        var asyncAttr = new AsyncExternalAttribute(type, Interface.Full);

        var newCode = type.Name
            .GetTypeInfo()
            .GenerateExtraCodeForExternalType(asyncAttr);

        Assert.Equal(
            """
            // <auto-generated/>
            using System;
            using System.Threading.Tasks;

            namespace AsyncIt.Tests
            {
                public static class SimpleClassTestExtensions
                {
                    public static Task Post1Async(this SimpleClassTest instance, string arg1)
                        => Task.Run(() => instance.Post1(arg1));

                    public static void Post1(this SimpleClassTest instance, string arg1)
                        => instance.Post1Async(arg1).Wait();

                    public static Task Post2Async(this SimpleClassTest instance, string arg1)
                        => Task.Run(() => instance.Post2(arg1));

                    public static void Post3(this SimpleClassTest instance, string arg1)
                        => instance.Post3Async(arg1).Wait();

                    public static Task<string> Send1Async(this SimpleClassTest instance, string arg1, string arg2)
                        => Task.Run(() => instance.Send1(arg1, arg2));

                    public static string Send1(this SimpleClassTest instance, string arg1, string arg2)
                        => instance.Send1Async(arg1, arg2).Result;

                    public static Task<string> Send2Async(this SimpleClassTest instance, string arg1, string arg2)
                        => Task.Run(() => instance.Send2(arg1, arg2));

                    public static string Send3(this SimpleClassTest instance, string arg1, string arg2)
                        => instance.Send3Async(arg1, arg2).Result;
                }
            }
            """, newCode);
    }
}