using System;
using System.Diagnostics;
using System.Xml.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AsyncIt.Tests.IntegrationTests;
public class LocalTypes_FullInterface_Tests : TestBase
{
    [Fact]
    public void GenerateFullPartialTypeForPublicType()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.PartialType, Interface = Interface.Full };
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;
            
            [Async]
            public partial class OrderService
            {
                static public Task<Order> GetOrderAsync(int id) => null;
                static public User GetUser(int id) => null;
            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                public partial class OrderService
                {
                    static public Order GetOrder(int id)
                        => GetOrderAsync(id).Result;

                    static public Task<User> GetUserAsync(int id)
                        => Task.Run(() => GetUser(id));
                }
            }
            """;

        var appCode = """
            using System;
            using AsyncIt.Tests;

            var order = OrderService.GetOrder(1);
            var user = OrderService.GetOrderAsync(1);
            """;

        var generatedCode = code.GenerateExtraSource(attr);
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }


    [Fact]
    public void GenerateFullExtensionMethodsForPublicType()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods, Interface = Interface.Full };
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;
            
            [Async]
            public class OrderService
            {
                public Task<Order> GetOrder(int id) => null;
                public User GetUser(int id) => null;
            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                public static class OrderServiceExtensions
                {
                    public static Order GetOrderSync(this OrderService instance, int id)
                        => instance.GetOrder(id).Result;

                    public static Task<User> GetUserAsync(this OrderService instance, int id)
                        => Task.Run(() => instance.GetUser(id));
                }
            }
            """;

        var appCode = """
            using System;
            using AsyncIt.Tests;
            
            var service = new OrderService();
            var order = service.GetOrderSync(1);
            var user = service.GetUserAsync(1);
            """;

        var generatedCode = code.GenerateExtraSource(attr);
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }

    [Fact]
    public void GenerateFullPartialTypeForPublicType2()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.PartialType, Interface = Interface.Full };
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;
            
            [Async]
            public partial class OrderService
            {
                static public Task<Order> GetOrder(int id) => null;
                static public User GetUserSync(int id) => null;
            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                public partial class OrderService
                {
                    static public Order GetOrderSync(int id)
                        => GetOrder(id).Result;

                    static public Task<User> GetUserAsync(int id)
                        => Task.Run(() => GetUserSync(id));
                }
            }
            """;

        var appCode = """
            using System;
            using AsyncIt.Tests;

            var order = OrderService.GetOrderSync(1);
            var user = OrderService.GetUserAsync(1);
            """;

        var generatedCode = code.GenerateExtraSource(attr);
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }


    [Fact]
    public void GenerateFullExtensionMethodsForPublicType2()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods, Interface = Interface.Full };
        var code = """
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests;
            
            [Async]
            public class OrderService
            {
                public Task<Order> GetOrderAsync(int id) => null;
                public User GetUser(int id) => null;
            }
            """;

        var expected = """
            // <auto-generated/>
            using System;
            using AsyncIt;

            namespace AsyncIt.Tests
            {
                public static class OrderServiceExtensions
                {
                    public static Order GetOrder(this OrderService instance, int id)
                        => instance.GetOrderAsync(id).Result;

                    public static Task<User> GetUserAsync(this OrderService instance, int id)
                        => Task.Run(() => instance.GetUser(id));
                }
            }
            """;

        var appCode = """
            using System;
            using AsyncIt.Tests;

            var service = new OrderService();
            var order = service.GetOrder(1);
            var user = service.GetOrderAsync(1);
            """;

        var generatedCode = code.GenerateExtraSource(attr);
        Assert.Equal(expected, generatedCode);

        var (exitCode, output) = BuildWithDotNet(appCode, code, generatedCode);
        Assert.Equal(0, exitCode);
    }
}