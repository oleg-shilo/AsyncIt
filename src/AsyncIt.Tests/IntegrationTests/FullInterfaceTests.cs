using System;
using System.Diagnostics;
using System.Xml.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AsyncIt.Tests.IntegrationTests;
public class FullInterfaceTests
{
    [Fact]
    public void GenerateFullPartialTypeForPublicType()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.PartialType, Interface = Interface.Full };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            partial public class OrderService
            {
                static public Task<Order> GetOrderAsync(int id) => null;
                static public User GetUser(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            partial public class OrderService
            {
                static public Order GetOrder(int id)
                    => GetOrderAsync(id).Result;

                static public Task<User> GetUserAsync(int id)
                    => Task.Run(() => GetUser(id));
            }
            """, newCode);
    }


    [Fact]
    public void GenerateFullExtensionMethodsForPublicType()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods, Interface = Interface.Full };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            partial public class OrderService
            {
                static public Task<Order> GetOrder(int id) => null;
                static public User GetUser(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            public static class OrderServiceExtensions
            {
                public static Order GetOrderSync(this OrderService instance, int id)
                    => instance.GetOrder(id).Result;

                public static Task<User> GetUserAsync(this OrderService instance, int id)
                    => Task.Run(() => instance.GetUser(id));
            }
            """, newCode);
    }

    [Fact]
    public void GenerateFullPartialTypeForPublicType2()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.PartialType, Interface = Interface.Full };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            partial public class OrderService
            {
                static public Task<Order> GetOrder(int id) => null;
                static public User GetUserSync(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            partial public class OrderService
            {
                static public Order GetOrderSync(int id)
                    => GetOrder(id).Result;

                static public Task<User> GetUserAsync(int id)
                    => Task.Run(() => GetUserSync(id));
            }
            """, newCode);
    }


    [Fact]
    public void GenerateFullExtensionMethodsForPublicType2()
    {
        var attr = new AsyncAttribute { Algorithm = Algorithm.ExtensionMethods, Interface = Interface.Full };
        SyntaxTree code = CSharpSyntaxTree.ParseText("""
            [Async]
            partial public class OrderService
            {
                static public Task<Order> GetOrderAsync(int id) => null;
                static public User GetUser(int id) => null;
            }
            """);

        var newCode = code.GenerateSourceForTypes(attr).First().Value;

        Assert.Equal(
            """
            // <auto-generated/>
            public static class OrderServiceExtensions
            {
                public static Order GetOrder(this OrderService instance, int id)
                    => instance.GetOrderAsync(id).Result;

                public static Task<User> GetUserAsync(this OrderService instance, int id)
                    => Task.Run(() => instance.GetUser(id));
            }
            """, newCode);
    }
}