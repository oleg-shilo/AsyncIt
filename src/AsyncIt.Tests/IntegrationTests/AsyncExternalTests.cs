using System;
using System.Diagnostics;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AsyncIt.Tests.IntegrationTests;

public class AsyncExternalTests
{

    [Fact]
    public void ShouldIgnoreNonPublicMethodsOfExternalAssembly()
    {
        // SyntaxTree code = CSharpSyntaxTree.ParseText("""
        //     [Async]
        //     public partial struct OrderService
        //     {
        //         public Order GetOrder(int id) => null;
        //         User GetUser(int id) => null;
        //     }
        //     """);

        // var newCode = code.GenerateSourceForTypes().First().Value;
        // Assert.Equal(
        //     """
        //     // <auto-generated/>
        //     public partial struct OrderService
        //     {
        //         public Task<Order> GetOrderAsync(int id) => Task.Run(() => GetOrder(id));
        //     }
        //     """, newCode);
    }

}