// <auto-generated/>

using System;
using System.Reflection;

namespace AsyncIt
{

    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
    public class AsyncAttribute : Attribute
    {
        public AsyncAttribute()
        {
        }

        public AsyncAttribute(Algorithm algorithm, Interface @interface)
        {
            Algorithm = algorithm;
            Interface = @interface;
        }
        public AsyncAttribute(Interface @interface, Algorithm algorithm)
        {
            Algorithm = algorithm;
            Interface = @interface;
        }

        public AsyncAttribute(Algorithm algorithm)
        {
            Algorithm = algorithm;
        }

        public AsyncAttribute(Interface @interface)
        {
            Interface = @interface;
        }
        public Algorithm Algorithm { get; set; }
        public Interface Interface { get; set; }
    }

    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true, Inherited = false)]
    public sealed class AsyncExternalAttribute : Attribute
    {
        public AsyncExternalAttribute(Type type)
        {
            Type = type;
        }

        public AsyncExternalAttribute(Type type, Interface @interface)
        {
            Type = type;
            Interface = @interface;
        }

        public Interface Interface { get; set; }
        public Type Type { get; set; }
    }

    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class IgnoreAttribute : Attribute
    {
    }

    public enum Interface
    {
        Async,
        Sync,
        Full,
    }

    public enum Algorithm
    {
        PartialType,
        ExtensionMethods
    }
}